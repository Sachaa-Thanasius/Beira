from typing import ClassVar, Literal, Protocol

class _HasAccuracy(Protocol):
    accuracy: int

class pdtContextStack:
    def __init__(self) -> None: ...
    def push(self, ctx: pdtContext) -> None: ...
    def pop(self) -> pdtContext | None: ...
    def last(self) -> pdtContext: ...
    def isEmpty(self) -> bool: ...

class pdtContext:
    __slots__ = ("accuracy",)
    accuracy: int
    ACU_YEAR: ClassVar[Literal[1]] = ...
    ACU_MONTH: ClassVar[Literal[2]] = ...
    ACU_WEEK: ClassVar[Literal[4]] = ...
    ACU_DAY: ClassVar[Literal[8]] = ...
    ACU_HALFDAY: ClassVar[Literal[16]] = ...
    ACU_HOUR: ClassVar[Literal[32]] = ...
    ACU_MIN: ClassVar[Literal[64]] = ...
    ACU_SEC: ClassVar[Literal[128]] = ...
    ACU_NOW: ClassVar[Literal[256]] = ...
    ACU_DATE: ClassVar[Literal[15]] = ...  # ACU_YEAR | ACU_MONTH | ACU_WEEK | ACU_DAY
    ACU_TIME: ClassVar[Literal[496]] = ...  # ACU_HALFDAY | ACU_HOUR | ACU_MIN | ACU_SEC | ACU_NOW
    _ACCURACY_MAPPING: ClassVar[list[tuple[int, str]]] = ...  # Undocumented.
    _ACCURACY_REVERSE_MAPPING: ClassVar[dict[str, int]] = ...  # Undocumented.
    def __init__(self, accuracy: int = 0) -> None: ...
    def updateAccuracy(self, *accuracy: int | str) -> None: ...
    def update(self, context: pdtContext) -> None: ...
    @property
    def hasDate(self) -> bool: ...
    @property
    def hasTime(self) -> bool: ...
    @property
    def dateTimeFlag(self) -> int: ...
    @property
    def hasDateOrTime(self) -> bool: ...
    # Only compares using .accuracy attribute. No isinstance check or NotImplemented present.
    def __eq__(self, ctx: _HasAccuracy) -> bool: ...  # pyright: ignore [reportIncompatibleMethodOverride]
